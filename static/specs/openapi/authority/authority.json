{
  "openapi": "3.1.0",
  "info": {
    "title": "Rainbow Authentication Authority API",
    "description": "Rainbow Authentication Module - Rainbow Authority API",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://127.0.0.1:1000",
      "description": "Testing server"
    }
  ],
  "tags": [
    {
      "name": "Wallet",
      "description": "Endpoints related to Wallet management"
    },
    {
      "name": "Provider",
      "description": "Endpoints related to the Provider interaction"
    },
    {
      "name": "Authority",
      "description": "Endpoints related to the Authority to retrieve credentials"
    },
    {
      "name": "Callbacks",
      "description": "Endpoints to handle callbacks"
    }
  ],
  "paths": {
    "/api/v1/wallet/register": {
      "post": {
        "tags": [
          "Wallet"
        ],
        "summary": "Register a new wallet",
        "description": "Creates a new wallet in the system.",
        "operationId": "wallet_register",
        "responses": {
          "201": {
            "description": "Wallet successfully registered."
          },
          "502": {
            "description": "The petition to the wallet went wrong"
          },
          "500": {
            "description": "Unexpected internal server error"
          }
        }
      }
    },
    "/api/v1/wallet/login": {
      "post": {
        "tags": [
          "Wallet"
        ],
        "summary": "Login a wallet",
        "description": "Authenticates an existing wallet in the system.",
        "operationId": "wallet_login",
        "responses": {
          "200": {
            "description": "Wallet successfully logged in."
          },
          "502": {
            "description": "The petition to the wallet went wrong"
          },
          "500": {
            "description": "Unexpected internal server error"
          }
        }
      }
    },
    "/api/v1/wallet/logout": {
      "post": {
        "tags": [
          "Wallet"
        ],
        "summary": "Logout a wallet",
        "description": "Logs out an authenticated wallet from the system.",
        "operationId": "wallet_logout",
        "responses": {
          "200": {
            "description": "Wallet successfully logged out."
          },
          "502": {
            "description": "The petition to the wallet went wrong"
          },
          "500": {
            "description": "Unexpected internal server error"
          }
        }
      }
    },
    "/api/v1/wallet/onboard": {
      "post": {
        "tags": [
          "Wallet"
        ],
        "summary": "Onboard a wallet",
        "description": "Performs the onboarding process for a wallet in the system.",
        "operationId": "wallet_onboard",
        "responses": {
          "201": {
            "description": "Wallet successfully onboarded."
          },
          "502": {
            "description": "The petition to the wallet went wrong"
          },
          "500": {
            "description": "Unexpected internal server error"
          }
        }
      }
    },
    "/api/v1/wallet/partial-onboard": {
      "post": {
        "tags": [
          "Wallet"
        ],
        "summary": "Partial onboard a wallet",
        "description": "Performs a partial onboarding process for a wallet in the system.",
        "operationId": "wallet_onboard",
        "responses": {
          "201": {
            "description": "Wallet successfully initialized."
          },
          "502": {
            "description": "The petition to the wallet went wrong"
          },
          "500": {
            "description": "Unexpected internal server error"
          }
        }
      }
    },
    "/api/v1/wallet/key": {
      "post": {
        "tags": [
          "Wallet"
        ],
        "summary": "Register key in wallet",
        "description": "Register the key from env files in wallet.",
        "operationId": "register-key",
        "responses": {
          "201": {
            "description": "Key successfully registered."
          },
          "412": {
            "description": "An action should be done before"
          },
          "502": {
            "description": "The petition to create the key went wrong"
          },
          "500": {
            "description": "Unexpected internal server error"
          }
        }
      },
      "delete": {
        "tags": [
          "Wallet"
        ],
        "summary": "Delete the key from wallet",
        "description": "Delete the key from wallet.",
        "operationId": "delete-key",
        "responses": {
          "201": {
            "description": "Key successfully deleted."
          },
          "412": {
            "description": "An action should be done before"
          },
          "502": {
            "description": "The petition to create the key went wrong"
          },
          "500": {
            "description": "Unexpected internal server error"
          }
        }
      }
    },
    "/api/v1/wallet/did": {
      "post": {
        "tags": [
          "Wallet"
        ],
        "summary": "Register Did in wallet",
        "description": "Register Did based on key in wallet.",
        "operationId": "register-did",
        "responses": {
          "201": {
            "description": "Did successfully registered."
          },
          "412": {
            "description": "An action should be done before"
          },
          "502": {
            "description": "The petition to the create the Did went wrong"
          },
          "500": {
            "description": "Unexpected internal server error"
          }
        }
      },
      "delete": {
        "tags": [
          "Wallet"
        ],
        "summary": "Delete Did from wallet",
        "description": "Delete Did from wallet.",
        "operationId": "delete-did",
        "responses": {
          "201": {
            "description": "Did successfully deleted."
          },
          "412": {
            "description": "An action should be done before"
          },
          "502": {
            "description": "The petition to the create the Did went wrong"
          },
          "500": {
            "description": "Unexpected internal server error"
          }
        }
      }
    },
    "/api/v1/did.json": {
      "get": {
        "tags": [
          "Wallet"
        ],
        "summary": "Retrieve DID document",
        "description": "Gets the DID document of the wallet.",
        "operationId": "didweb",
        "responses": {
          "200": {
            "description": "DID document successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@context": {
                      "type": "string"
                    },
                    "id": {
                      "type": "string"
                    },
                    "verificationMethod": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "type": {
                            "type": "string"
                          },
                          "controller": {
                            "type": "string"
                          },
                          "publicKeyBase58": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "id",
                          "type",
                          "controller",
                          "publicKeyBase58"
                        ]
                      }
                    },
                    "authentication": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "@context",
                    "id",
                    "verificationMethod",
                    "authentication"
                  ]
                }
              }
            }
          },
          "412": {
            "description": "There is no wallet associated with the session or the Wallet does not have any dids."
          },
          "500": {
            "description": "Unexpected internal server error."
          }
        }
      }
    },
    "/api/v1/request/credential": {
      "post": {
        "tags": [
          "Minions"
        ],
        "summary": "Initiate request to retrieve credentials",
        "description": "Sends the initial GNAP access request to the authority.",
        "operationId": "vc_request",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "access_token": {
                    "type": "object",
                    "properties": {
                      "access": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string"
                          },
                          "actions": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "locations": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "datatypes": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "identifier": {
                            "type": "string"
                          },
                          "privileges": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        },
                        "required": [
                          "type"
                        ]
                      },
                      "label": {
                        "type": "string"
                      },
                      "flags": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "access"
                    ]
                  },
                  "subject": {
                    "type": "object",
                    "properties": {
                      "sub_id_formats": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "assertion_formats": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "sub_ids": {
                        "type": "object"
                      }
                    }
                  },
                  "client": {
                    "type": "object"
                  },
                  "user": {
                    "type": "string"
                  },
                  "interact": {
                    "type": "object",
                    "properties": {
                      "start": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "finish": {
                        "type": "object",
                        "properties": {
                          "method": {
                            "type": "string"
                          },
                          "uri": {
                            "type": "string"
                          },
                          "nonce": {
                            "type": "string"
                          },
                          "hash_method": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "method",
                          "nonce"
                        ]
                      },
                      "hints": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "start",
                      "finish"
                    ]
                  }
                },
                "required": [
                  "access_token",
                  "client"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Grant request successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "continue": {
                      "type": "object",
                      "properties": {
                        "uri": {
                          "type": "string"
                        },
                        "wait": {
                          "type": "integer"
                        },
                        "access_token": {
                          "type": "object",
                          "properties": {
                            "access": {
                              "type": "object",
                              "properties": {
                                "type": {
                                  "type": "string"
                                },
                                "actions": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                },
                                "locations": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                },
                                "datatypes": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                },
                                "identifier": {
                                  "type": "string"
                                },
                                "privileges": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                }
                              },
                              "required": [
                                "type"
                              ]
                            },
                            "label": {
                              "type": "string"
                            },
                            "flags": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          },
                          "required": [
                            "access"
                          ]
                        }
                      }
                    },
                    "subject": {
                      "type": "object",
                      "properties": {
                        "sub_id_formats": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "assertion_formats": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "sub_ids": {
                          "type": "object"
                        }
                      }
                    },
                    "instance_id": {
                      "type": "object"
                    },
                    "user": {
                      "type": "string"
                    },
                    "interact": {
                      "type": "object",
                      "properties": {
                        "start": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "finish": {
                          "type": "object",
                          "properties": {
                            "method": {
                              "type": "string"
                            },
                            "uri": {
                              "type": "string"
                            },
                            "nonce": {
                              "type": "string"
                            },
                            "hash_method": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "method",
                            "nonce"
                          ]
                        },
                        "hints": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "start",
                        "finish"
                      ]
                    }
                  },
                  "required": [
                    "continue",
                    "instance_id",
                    "interact"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "The request was malformed."
          },
          "501": {
            "description": "Not implemented yet: request contains fields not yet handled."
          },
          "500": {
            "description": "Unexpected internal server error or database error."
          }
        }
      }
    },
    "/api/v1/continue/{id}": {
      "post": {
        "tags": [
          "Minions"
        ],
        "summary": "Continue GNAP request",
        "description": "Continues a GNAP access request using the interaction reference and Authorization token.",
        "operationId": "continue_request",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Request identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "interact_ref": {
                    "type": "string"
                  }
                },
                "required": [
                  "interact_ref"
                ]
              }
            }
          }
        },
        "headers": {
          "Authorization": {
            "description": "GNAP access token, format: 'GNAP <token>'",
            "schema": {
              "type": "string"
            }
          }
        },
        "responses": {
          "200": {
            "description": "Access token successfully generated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "value": {
                      "type": "string"
                    },
                    "label": {
                      "type": "string"
                    },
                    "manage": {
                      "type": "object"
                    },
                    "access": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "expires_in": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "key": {
                      "type": "object"
                    },
                    "flags": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "value",
                    "access"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: missing or invalid Authorization token."
          },
          "404": {
            "description": "Request with given id not found."
          },
          "422": {
            "description": "Unprocessable entity: interact_ref or token does not match expected value."
          },
          "500": {
            "description": "Unexpected internal server error or database error."
          }
        }
      }
    },
    "/api/v1/pd/{state}": {
      "get": {
        "tags": [
          "OIDC4VP"
        ],
        "summary": "Retrieve VP Definition",
        "description": "Generates and retrieves the Verifiable Presentation definition for the given state identifier.",
        "operationId": "pd",
        "parameters": [
          {
            "name": "state",
            "in": "path",
            "required": true,
            "description": "State identifier for the VP request",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Verifiable Presentation definition successfully generated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          },
          "404": {
            "description": "State not found: no VP Definition exists for the given identifier."
          },
          "500": {
            "description": "Unexpected internal server error or database error."
          }
        }
      }
    },
    "/api/v1/verify/{state}": {
      "post": {
        "tags": [
          "OIDC4VP"
        ],
        "summary": "Verify VP Submission",
        "description": "Verifies the submitted Verifiable Presentation for a given state identifier.",
        "operationId": "verify",
        "parameters": [
          {
            "name": "state",
            "in": "path",
            "required": true,
            "description": "State identifier for the verification request",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "vp_token": {
                    "type": "string"
                  },
                  "presentation_submission": {
                    "type": "string"
                  }
                },
                "required": [
                  "vp_token",
                  "presentation_submission"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Verification completed, returns URI if available.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "null"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request: malformed or missing fields."
          },
          "404": {
            "description": "State not found: no verification request exists for the given identifier."
          },
          "422": {
            "description": "Unprocessable entity: validation failed."
          },
          "500": {
            "description": "Unexpected internal server error or database error."
          }
        }
      }
    },
    "/api/v1/request/all": {
      "get": {
        "summary": "Get all requests",
        "description": "Returns a list of all requests.",
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/v1/request/{id}": {
      "get": {
        "summary": "Get request by ID",
        "description": "Returns a specific request given its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Request ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "summary": "Manage a request",
        "description": "Approves or rejects a specific request given its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Request ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request payload for managing the request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "approve": {
                    "type": "boolean",
                    "description": "Whether to approve the request or not"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "502": {
            "description": "Petition to the issuer api failed"
          }
        }
      }
    },
    "/api/v1/callback/{id}": {
      "post": {
        "summary": "Manage callback",
        "description": "Processes a callback from the Issuer API for a given request ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Request ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Payload containing callback event data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "description": "Type of callback event"
                  },
                  "data": {
                    "type": "object",
                    "description": "Event-specific data"
                  }
                },
                "required": ["type", "data"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    }

  }
}