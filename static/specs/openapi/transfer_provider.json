{
  "openapi": "3.1.0",
  "info": {
    "title": "Transfer Process Protocol - Rainbow Provider API",
    "description": "This API exposes endpoints to manage data transfer processes between a Provider and a Consumer according to the Transfer Process Protocol. It allows querying the status of transfers, initiating transfer lifecycle events (start, completion, termination) via RPC calls, and managing webhook subscriptions to receive real-time event notifications.",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://api-provider.rainbow.dit.upm.es",
      "description": "Production Server"
    },
    {
      "url": "http://127.0.0.1:1100",
      "description": "Local Testing Server"
    }
  ],
  "tags": [
    {
      "name": "Transfer Processes",
      "description": "Endpoints for querying the status and details of data transfer processes."
    },
    {
      "name": "RPC",
      "description": "Endpoints for remote lifecycle control of a transfer (Remote Procedure Call)."
    },
    {
      "name": "Subscriptions",
      "description": "Endpoints for managing event subscriptions (webhooks)."
    },
    {
      "name": "Notifications",
      "description": "Endpoints for querying sent event notifications."
    }
  ],
  "paths": {
    "/api/v1/transfers": {
      "get": {
        "tags": [
          "Transfer Processes"
        ],
        "summary": "List all transfer processes",
        "operationId": "getAllTransfers",
        "security": [],
        "description": "Retrieves a list of all transfer processes managed by this provider. It can be used to monitor the status of ongoing and completed data transfers.",
        "responses": {
          "200": {
            "description": "A list of transfer process objects.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RainbowTransferProcess"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: An error occurred on the server while retrieving transfer processes.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RainbowTransferError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/transfers/{transfer_id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/transfer_id"
        }
      ],
      "get": {
        "tags": [
          "Transfer Processes"
        ],
        "summary": "Get a transfer process by ID",
        "operationId": "getTransferById",
        "security": [],
        "description": "Retrieves the details of a specific transfer process using its unique identifier (`transfer_id`).",
        "responses": {
          "200": {
            "description": "Transfer process details successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RainbowTransferProcess"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The provided `transfer_id` does not follow the required 'urn:uuid:<uuid>' format.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RainbowTransferError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found: No transfer process was found with the specified `transfer_id`.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RainbowTransferError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: An error occurred on the server while retrieving the transfer process.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RainbowTransferError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/transfers/{transfer_id}/messages": {
      "parameters": [
        {
          "$ref": "#/components/parameters/transfer_id"
        }
      ],
      "get": {
        "tags": [
          "Transfer Processes"
        ],
        "summary": "List all messages for a transfer",
        "operationId": "getMessagesByTransferId",
        "security": [],
        "description": "Retrieves a chronological list of all messages exchanged (e.g., start, completion) within a specific transfer process.",
        "responses": {
          "200": {
            "description": "A list of messages associated with the transfer process.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RainbowTransferMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The provided `transfer_id` does not follow the required 'urn:uuid:<uuid>' format.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RainbowTransferError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found: No transfer process was found with the specified `transfer_id`.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RainbowTransferError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: An error occurred on the server while retrieving messages.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RainbowTransferError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/transfers/{transfer_id}/messages/{message_id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/transfer_id"
        },
        {
          "$ref": "#/components/parameters/message_id"
        }
      ],
      "get": {
        "tags": [
          "Transfer Processes"
        ],
        "summary": "Get a transfer message by ID",
        "operationId": "getMessageById",
        "security": [],
        "description": "Retrieves a specific message within a transfer process using both identifiers.",
        "responses": {
          "200": {
            "description": "Transfer message details successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RainbowTransferMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The provided `transfer_id` or `message_id` does not follow the required 'urn:uuid:<uuid>' format.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RainbowTransferError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found: The transfer process or message with the specified IDs was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RainbowTransferError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: An error occurred on the server while retrieving the message.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RainbowTransferError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/transfers/rpc/setup-start": {
      "post": {
        "tags": [
          "RPC"
        ],
        "summary": "Start a transfer process",
        "operationId": "rpcSetupStart",
        "security": [],
        "description": "Initiates the data transfer process. The provider creates a `TransferStartMessage`, sends it to the consumer, establishes the data plane, and persists the process.",
        "requestBody": {
          "description": "Details required to start the transfer.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DSRPCTransferProviderStartRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Transfer process successfully started. The consumer has confirmed receipt.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DSRPCTransferProviderStartResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request body (JSON) is malformed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DSRPCTransferProviderErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: A general error occurred on the provider.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DSRPCTransferProviderErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable: The consumer's service (peer) is not available or returned an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DSRPCTransferProviderErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/transfers/rpc/setup-suspension": {
      "post": {
        "tags": [
          "RPC"
        ],
        "summary": "Suspend a transfer process",
        "operationId": "rpcSetupSuspension",
        "security": [],
        "description": "Suspends an ongoing data transfer process. The provider creates a `TransferSuspensionMessage` and sends it to the consumer to pause the transfer.",
        "requestBody": {
          "description": "Details required to suspend the transfer.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DSRPCTransferProviderSuspensionRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Transfer process successfully suspended. The consumer has confirmed receipt.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DSRPCTransferProviderSuspensionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request body (JSON) is malformed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DSRPCTransferProviderErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: A general error occurred on the provider.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DSRPCTransferProviderErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable: The consumer's service (peer) is not available or returned an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DSRPCTransferProviderErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/transfers/rpc/setup-completion": {
      "post": {
        "tags": [
          "RPC"
        ],
        "summary": "Complete a transfer process",
        "operationId": "rpcSetupCompletion",
        "security": [],
        "description": "Marks a data transfer process as completed. The provider creates a `TransferCompletionMessage` and sends it to the consumer.",
        "requestBody": {
          "description": "Details required to complete the transfer.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DSRPCTransferProviderCompletionRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Transfer process successfully completed. The consumer has confirmed receipt.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DSRPCTransferProviderCompletionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request body (JSON) is malformed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DSRPCTransferProviderErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: A general error occurred on the provider.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DSRPCTransferProviderErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable: The consumer's service (peer) is not available or returned an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DSRPCTransferProviderErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/transfers/rpc/setup-termination": {
      "post": {
        "tags": [
          "RPC"
        ],
        "summary": "Terminate a transfer process",
        "operationId": "rpcSetupTermination",
        "security": [],
        "description": "Terminates a data transfer process prematurely. The provider creates a `TransferTerminationMessage` and sends it to the consumer.",
        "requestBody": {
          "description": "Details required to terminate the transfer, optionally including a code and reason.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DSRPCTransferProviderTerminationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Transfer process successfully terminated. The consumer has confirmed receipt.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DSRPCTransferProviderTerminationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request body (JSON) is malformed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DSRPCTransferProviderErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: A general error occurred on the provider.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DSRPCTransferProviderErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable: The consumer's service (peer) is not available or returned an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DSRPCTransferProviderErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/transfers/subscriptions": {
      "get": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "List all subscriptions",
        "operationId": "getAllSubscriptions",
        "security": [],
        "description": "Retrieves a list of all event subscriptions (webhooks) currently configured on the provider.",
        "responses": {
          "200": {
            "description": "A list of subscription objects.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RainbowEventsSubscriptionCreationResponse"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: A general error occurred on the provider.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionErrorMessage"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Create a new subscription",
        "operationId": "createSubscription",
        "security": [],
        "description": "Registers a new subscription to receive event notifications at a specified callback URL. This allows external systems to react to changes in the transfer lifecycle.",
        "requestBody": {
          "description": "Details of the subscription to be created.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RainbowEventsSubscriptionCreationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Subscription created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RainbowEventsSubscriptionCreationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request body is malformed or the callback URL is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionErrorMessage"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: An error occurred while creating the subscription.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/transfers/subscriptions/{subscription_id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/subscription_id"
        }
      ],
      "get": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Get a subscription by ID",
        "operationId": "getSubscriptionById",
        "security": [],
        "description": "Retrieves the details of a specific subscription using its unique identifier.",
        "responses": {
          "200": {
            "description": "Subscription details successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RainbowEventsSubscriptionCreationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The provided `subscription_id` does not follow the required 'urn:uuid:<uuid>' format.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found: No subscription was found with the specified ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionErrorMessage"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: An error occurred while retrieving the subscription.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionErrorMessage"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Update a subscription by ID",
        "operationId": "updateSubscriptionById",
        "security": [],
        "description": "Modifies an existing subscription. Allows changing the callback URL or expiration date.",
        "requestBody": {
          "description": "Fields of the subscription to be updated.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RainbowEventsSubscriptionEditionRequest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Subscription updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RainbowEventsSubscriptionCreationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request body is malformed or the `subscription_id` is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found: No subscription was found with the specified ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionErrorMessage"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: An error occurred while updating the subscription.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionErrorMessage"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Delete a subscription by ID",
        "operationId": "deleteSubscriptionById",
        "security": [],
        "description": "Permanently deletes a subscription. The provider will stop sending notifications to the associated callback URL.",
        "responses": {
          "204": {
            "description": "Subscription deleted successfully. No content is returned."
          },
          "404": {
            "description": "Not Found: No subscription was found with the specified ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionErrorMessage"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: An error occurred while deleting the subscription.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/transfers/notifications": {
      "get": {
        "tags": [
          "Notifications"
        ],
        "summary": "List all notifications",
        "operationId": "getAllNotifications",
        "security": [],
        "description": "Retrieves a history of all notifications sent by the provider to all subscriptions.",
        "responses": {
          "200": {
            "description": "A list of all notifications.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RainbowEventsNotificationResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/transfers/subscriptions/{subscription_id}/notifications": {
      "parameters": [
        {
          "$ref": "#/components/parameters/subscription_id"
        }
      ],
      "get": {
        "tags": [
          "Notifications"
        ],
        "summary": "List notifications for a subscription",
        "operationId": "getNotificationsBySubscriptionId",
        "security": [],
        "description": "Retrieves all notifications (sent and pending) associated with a specific subscription.",
        "responses": {
          "200": {
            "description": "A list of notifications for the specified subscription.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RainbowEventsNotificationResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The provided `subscription_id` is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found: The specified subscription was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationErrorMessage"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: An error occurred on the server.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/transfers/subscriptions/{subscription_id}/notifications-pending": {
      "parameters": [
        {
          "$ref": "#/components/parameters/subscription_id"
        }
      ],
      "get": {
        "tags": [
          "Notifications"
        ],
        "summary": "List pending notifications for a subscription",
        "operationId": "getPendingNotificationsBySubscriptionId",
        "security": [],
        "description": "Retrieves a list of notifications that have not yet been sent or confirmed by a specific subscription's callback. Useful for debugging and retries.",
        "responses": {
          "200": {
            "description": "A list of pending notifications.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RainbowEventsNotificationResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The provided `subscription_id` is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found: The specified subscription was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationErrorMessage"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: An error occurred on the server.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/transfers/subscriptions/{subscription_id}/ack-notifications-pending": {
      "parameters": [
        {
          "$ref": "#/components/parameters/subscription_id"
        }
      ],
      "post": {
        "tags": [
          "Notifications"
        ],
        "summary": "Returns pending notifications for a subscription and sets them as acknowledged",
        "operationId": "ackPendingNotificationsBySubscriptionId",
        "security": [],
        "description": "Retrieves a list of notifications that have not yet been sent or confirmed by a specific subscription's callback. Once retrieved, these notifications are marked as acknowledged to prevent future retrievals.",
        "responses": {
          "202": {
            "description": "A list of pending notifications.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RainbowEventsNotificationResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The provided `subscription_id` is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found: The specified subscription was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationErrorMessage"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: An error occurred on the server.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/transfers/subscriptions/{subscription_id}/notifications/{notification_id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/subscription_id"
        },
        {
          "$ref": "#/components/parameters/notification_id"
        }
      ],
      "get": {
        "tags": [
          "Notifications"
        ],
        "summary": "Get a specific notification by ID",
        "operationId": "getNotificationById",
        "security": [],
        "description": "Retrieves the details of a specific notification within the context of its subscription.",
        "responses": {
          "200": {
            "description": "Notification details successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RainbowEventsNotificationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The `subscription_id` or `notification_id` is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found: The subscription or notification with the specified IDs was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationErrorMessage"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: An error occurred on the server.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationErrorMessage"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "parameters": {
      "transfer_id": {
        "name": "transfer_id",
        "in": "path",
        "required": true,
        "description": "The unique identifier of the transfer process.",
        "schema": {
          "type": "string",
          "pattern": "^urn:uuid:[0-9a-fA-F-]{36}$",
          "examples": [
            "urn:uuid:123e4567-e89b-12d3-a456-426614174000"
          ]
        }
      },
      "message_id": {
        "name": "message_id",
        "in": "path",
        "required": true,
        "description": "The unique identifier of the transfer message.",
        "schema": {
          "type": "string",
          "pattern": "^urn:uuid:[0-9a-fA-F-]{36}$",
          "examples": [
            "urn:uuid:765e4321-e89b-12d3-a456-426614174001"
          ]
        }
      },
      "subscription_id": {
        "name": "subscription_id",
        "in": "path",
        "required": true,
        "description": "The unique identifier of the subscription.",
        "schema": {
          "type": "string",
          "pattern": "^urn:uuid:[0-9a-fA-F-]{36}$",
          "examples": [
            "urn:uuid:987a6543-e21b-54d3-a456-112233445566"
          ]
        }
      },
      "notification_id": {
        "name": "notification_id",
        "in": "path",
        "required": true,
        "description": "The unique identifier of the notification.",
        "schema": {
          "type": "string",
          "pattern": "^urn:uuid:[0-9a-fA-F-]{36}$",
          "examples": [
            "urn:uuid:543b2109-cba0-45f8-8123-abcdefabcdef"
          ]
        }
      }
    },
    "schemas": {
      "RainbowTransferProcess": {
        "type": "object",
        "description": "Represents the complete state and metadata of a data transfer process.",
        "properties": {
          "provider_pid": {
            "type": "string",
            "pattern": "^urn:uuid:[0-9a-fA-F-]{36}$",
            "description": "Unique identifier (Process ID) of the provider in this transfer.",
            "examples": [
              "urn:uuid:221e21b0-e295-469a-bbc7-8565acd7d8e6"
            ]
          },
          "consumer_pid": {
            "type": "string",
            "pattern": "^urn:uuid:[0-9a-fA-F-]{36}$",
            "description": "Unique identifier (Process ID) of the consumer in this transfer.",
            "examples": [
              "urn:uuid:335f54c1-f321-458b-cdb8-1234acd5d8f7"
            ]
          },
          "agreement_pid": {
            "type": "string",
            "pattern": "^urn:uuid:[0-9a-fA-F-]{36}$",
            "description": "Identifier of the contract agreement under which this transfer is made.",
            "examples": [
              "urn:uuid:990e11a9-b123-456c-ddc1-9876acd7d8e8"
            ]
          },
          "data_plane_pid": {
            "type": "string",
            "pattern": "^urn:uuid:[0-9a-fA-F-]{36}$",
            "description": "Identifier of the data plane used for the actual data transfer.",
            "examples": [
              "urn:uuid:111a22b3-c444-567d-eef2-1122acd3d4e5"
            ]
          },
          "state": {
            "type": "string",
            "description": "The current state of the transfer process.",
            "enum": [
              "REQUESTED",
              "STARTED",
              "SUSPENDED",
              "COMPLETED",
              "TERMINATED"
            ],
            "examples": [
              "STARTED"
            ]
          },
          "created_at": {
            "type": "string",
            "description": "Timestamp (ISO 8601) of when the transfer process was created.",
            "format": "date-time",
            "examples": [
              "2025-03-07T09:56:28.105105Z"
            ]
          },
          "updated_at": {
            "type": "string",
            "description": "Timestamp (ISO 8601) of the last state update of the process.",
            "format": "date-time",
            "examples": [
              "2025-03-07T10:15:00.500200Z"
            ]
          }
        },
        "required": [
          "provider_pid",
          "consumer_pid",
          "agreement_pid",
          "data_plane_pid",
          "state",
          "created_at"
        ]
      },
      "RainbowTransferMessage": {
        "type": "object",
        "description": "Represents a single message exchanged between the provider and consumer as part of a transfer process.",
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^urn:uuid:[0-9a-fA-F-]{36}$",
            "description": "Unique identifier of the message.",
            "examples": [
              "urn:uuid:887d12c9-e111-456a-aac8-9988acd7d1a2"
            ]
          },
          "transfer_process_id": {
            "type": "string",
            "pattern": "^urn:uuid:[0-9a-fA-F-]{36}$",
            "description": "Identifier of the transfer process to which this message belongs.",
            "examples": [
              "urn:uuid:221e21b0-e295-469a-bbc7-8565acd7d8e6"
            ]
          },
          "created_at": {
            "type": "string",
            "description": "Timestamp (ISO 8601) of the message creation.",
            "format": "date-time",
            "examples": [
              "2025-03-07T09:56:28.105105Z"
            ]
          },
          "message_type": {
            "type": "string",
            "description": "The type of transfer message.",
            "enum": [
              "TransferRequestMessage",
              "TransferStartMessage",
              "TransferSuspensionMessage",
              "TransferCompletionMessage",
              "TransferTerminationMessage"
            ],
            "examples": [
              "TransferStartMessage"
            ]
          },
          "from": {
            "type": "string",
            "description": "Indicates who sent the message.",
            "enum": [
              "Provider",
              "Consumer"
            ],
            "examples": [
              "Provider"
            ]
          },
          "to": {
            "type": "string",
            "description": "Indicates who was the recipient of the message.",
            "enum": [
              "Provider",
              "Consumer"
            ],
            "examples": [
              "Consumer"
            ]
          },
          "content": {
            "type": "object",
            "description": "The payload of the message, which varies depending on the `message_type`.",
            "examples": [
              {
                "@context": "https://w3id.org/dspace/2025/1/context.jsonld",
                "@type": "TransferStartMessage",
                "providerPid": "urn:uuid:221e21b0-e295-469a-bbc7-8565acd7d8e6",
                "consumerPid": "urn:uuid:335f54c1-f321-458b-cdb8-1234acd5d8f7"
              }
            ]
          }
        },
        "required": [
          "id",
          "transfer_process_id",
          "created_at",
          "message_type",
          "from",
          "to",
          "content"
        ]
      },
      "RainbowTransferError": {
        "type": "object",
        "description": "Standard error structure for the transfer query endpoints.",
        "properties": {
          "error": {
            "type": "object",
            "properties": {
              "code": {
                "type": "string",
                "description": "The HTTP status code.",
                "examples": [
                  "404"
                ]
              },
              "title": {
                "type": "string",
                "description": "A short title for the error.",
                "examples": [
                  "NOT_FOUND"
                ]
              },
              "message": {
                "type": "string",
                "description": "A human-readable description of the error.",
                "examples": [
                  "Transfer process with the specified ID was not found."
                ]
              }
            },
            "required": [
              "code",
              "title",
              "message"
            ]
          }
        },
        "required": [
          "error"
        ]
      },
      "DSRPCTransferProviderStartRequest": {
        "type": "object",
        "description": "Request body to start a transfer process via RPC.",
        "properties": {
          "consumerParticipantId": {
            "type": "string",
            "description": "Consumer participant DID.",
            "examples": [
              "did:web:example.com"
            ]
          },
          "consumerCallbackAddress": {
            "type": "string",
            "description": "URL to which the provider will send the protocol messages.",
            "examples": [
              "https://consumer.example.com/api/callback"
            ]
          },
          "providerPid": {
            "type": "string",
            "pattern": "^urn:uuid:[0-9a-fA-F-]{36}$",
            "description": "Process ID of the provider for this transfer."
          },
          "consumerPid": {
            "type": "string",
            "pattern": "^urn:uuid:[0-9a-fA-F-]{36}$",
            "description": "Process ID of the consumer for this transfer."
          },
          "dataAddress": {
            "$ref": "#/components/schemas/DataAddress",
            "description": "Information on how to access the data (if applicable at this stage)."
          }
        },
        "required": [
          "consumerParticipantId",
          "providerPid",
          "consumerPid"
        ]
      },
      "DSRPCTransferProviderStartResponse": {
        "type": "object",
        "description": "Successful response when starting a transfer process.",
        "properties": {
          "providerPid": {
            "type": "string",
            "pattern": "^urn:uuid:[0-9a-fA-F-]{36}$"
          },
          "consumerPid": {
            "type": "string",
            "pattern": "^urn:uuid:[0-9a-fA-F-]{36}$"
          },
          "message": {
            "$ref": "#/components/schemas/TransferProcessMessage",
            "description": "The transfer process message that was sent to the consumer."
          },
          "dataAddress": {
            "$ref": "#/components/schemas/DataAddress"
          }
        },
        "required": [
          "providerPid",
          "consumerPid",
          "message"
        ]
      },
      "DSRPCTransferProviderSuspensionRequest": {
        "type": "object",
        "description": "Request body to suspend a transfer process via RPC.",
        "properties": {
          "consumerParticipantId": {
            "type": "string",
            "description": "Consumer participant DID.",
            "examples": [
              "did:web:example.com"
            ]
          },
          "consumerCallbackAddress": {
            "type": "string",
            "examples": [
              "https://consumer.example.com/api/callback"
            ]
          },
          "providerPid": {
            "type": "string",
            "pattern": "^urn:uuid:[0-9a-fA-F-]{36}$"
          },
          "consumerPid": {
            "type": "string",
            "pattern": "^urn:uuid:[0-9a-fA-F-]{36}$"
          },
          "code": {
            "type": "string",
            "description": "An optional code indicating the reason for the suspension."
          },
          "reason": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "An optional list of human-readable reasons for the suspension."
          }
        },
        "required": [
          "consumerParticipantId",
          "providerPid",
          "consumerPid"
        ]
      },
      "DSRPCTransferProviderSuspensionResponse": {
        "type": "object",
        "description": "Successful response when suspending a transfer process.",
        "properties": {
          "providerPid": {
            "type": "string",
            "pattern": "^urn:uuid:[0-9a-fA-F-]{36}$"
          },
          "consumerPid": {
            "type": "string",
            "pattern": "^urn:uuid:[0-9a-fA-F-]{36}$"
          },
          "message": {
            "$ref": "#/components/schemas/TransferProcessMessage"
          }
        },
        "required": [
          "providerPid",
          "consumerPid",
          "message"
        ]
      },
      "DSRPCTransferProviderCompletionRequest": {
        "type": "object",
        "description": "Request body to complete a transfer process via RPC.",
        "properties": {
          "consumerParticipantId": {
            "type": "string",
            "description": "Consumer participant DID.",
            "examples": [
              "did:web:example.com"
            ]
          },
          "consumerCallbackAddress": {
            "type": "string",
            "examples": [
              "https://consumer.example.com/api/callback"
            ]
          },
          "providerPid": {
            "type": "string",
            "pattern": "^urn:uuid:[0-9a-fA-F-]{36}$"
          },
          "consumerPid": {
            "type": "string",
            "pattern": "^urn:uuid:[0-9a-fA-F-]{36}$"
          }
        },
        "required": [
          "consumerParticipantId",
          "providerPid",
          "consumerPid"
        ]
      },
      "DSRPCTransferProviderCompletionResponse": {
        "type": "object",
        "description": "Successful response when completing a transfer process.",
        "properties": {
          "providerPid": {
            "type": "string",
            "pattern": "^urn:uuid:[0-9a-fA-F-]{36}$"
          },
          "consumerPid": {
            "type": "string",
            "pattern": "^urn:uuid:[0-9a-fA-F-]{36}$"
          },
          "message": {
            "$ref": "#/components/schemas/TransferProcessMessage"
          }
        },
        "required": [
          "providerPid",
          "consumerPid",
          "message"
        ]
      },
      "DSRPCTransferProviderTerminationRequest": {
        "type": "object",
        "description": "Request body to terminate a transfer process via RPC.",
        "properties": {
          "consumerParticipantId": {
            "type": "string",
            "description": "Consumer participant DID.",
            "examples": [
              "did:web:example.com"
            ]
          },
          "consumerCallbackAddress": {
            "type": "string",
            "examples": [
              "https://consumer.example.com/api/callback"
            ]
          },
          "providerPid": {
            "type": "string",
            "pattern": "^urn:uuid:[0-9a-fA-F-]{36}$"
          },
          "consumerPid": {
            "type": "string",
            "pattern": "^urn:uuid:[0-9a-fA-F-]{36}$"
          },
          "code": {
            "type": "string",
            "description": "An optional code indicating the reason for the termination."
          },
          "reason": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "An optional list of human-readable reasons for the termination."
          }
        },
        "required": [
          "consumerParticipantId",
          "providerPid",
          "consumerPid"
        ]
      },
      "DSRPCTransferProviderTerminationResponse": {
        "type": "object",
        "description": "Successful response when terminating a transfer process.",
        "properties": {
          "providerPid": {
            "type": "string",
            "pattern": "^urn:uuid:[0-9a-fA-F-]{36}$"
          },
          "consumerPid": {
            "type": "string",
            "pattern": "^urn:uuid:[0-9a-fA-F-]{36}$"
          },
          "message": {
            "$ref": "#/components/schemas/TransferProcessMessage"
          }
        },
        "required": [
          "providerPid",
          "consumerPid",
          "message"
        ]
      },
      "DSRPCTransferProviderErrorResponse": {
        "type": "object",
        "description": "Error structure for transfer RPC operations.",
        "properties": {
          "providerPid": {
            "type": "string",
            "pattern": "^urn:uuid:[0-9a-fA-F-]{36}$"
          },
          "consumerPid": {
            "type": "string",
            "pattern": "^urn:uuid:[0-9a-fA-F-]{36}$"
          },
          "error": {
            "$ref": "#/components/schemas/TransferError"
          }
        },
        "required": [
          "error"
        ]
      },
      "DataAddress": {
        "type": "object",
        "description": "Defines how and where data can be accessed.",
        "properties": {
          "endpointType": {
            "type": "string",
            "description": "Type of endpoint, e.g., 'HttpData', 'S3', etc.",
            "examples": [
              "HttpData"
            ]
          },
          "endpoint": {
            "type": "string",
            "description": "The URL or identifier of the endpoint.",
            "examples": [
              "https://provider.example.com/data/asset123"
            ]
          },
          "endpointProperties": {
            "type": "array",
            "description": "Additional properties needed to access the endpoint, such as authentication headers, etc.",
            "items": {
              "$ref": "#/components/schemas/EndpointProperty"
            }
          }
        },
        "required": [
          "endpointType",
          "endpoint"
        ]
      },
      "EndpointProperty": {
        "type": "object",
        "description": "A key-value pair for defining endpoint properties.",
        "properties": {
          "key": {
            "type": "string",
            "examples": [
              "authKey"
            ]
          },
          "value": {
            "type": "string",
            "examples": [
              "authCode"
            ]
          }
        },
        "required": [
          "key",
          "value"
        ]
      },
      "TransferProcessMessage": {
        "type": "object",
        "description": "A generic message that is part of the transfer protocol.",
        "properties": {
          "context": {
            "type": "string",
            "description": "JSON-LD context of the message.",
            "examples": [
              "https://w3id.org/dspace/2025/1/context.jsonld"
            ]
          },
          "type": {
            "type": "string",
            "description": "The type of transfer message.",
            "enum": [
              "TransferRequestMessage",
              "TransferStartMessage",
              "TransferSuspensionMessage",
              "TransferCompletionMessage",
              "TransferTerminationMessage"
            ],
            "examples": [
              "TransferStartMessage"
            ]
          },
          "providerPid": {
            "type": "string",
            "pattern": "^urn:uuid:[0-9a-fA-F-]{36}$"
          },
          "consumerPid": {
            "type": "string",
            "pattern": "^urn:uuid:[0-9a-fA-F-]{36}$"
          },
          "state": {
            "type": "string",
            "description": "The state of the process associated with the message.",
            "enum": [
              "REQUESTED",
              "STARTED",
              "SUSPENDED",
              "COMPLETED",
              "TERMINATED"
            ],
            "examples": [
              "STARTED"
            ]
          }
        }
      },
      "TransferError": {
        "type": "object",
        "description": "An error message that is part of the transfer protocol.",
        "properties": {
          "context": {
            "type": "string",
            "description": "JSON-LD context of the message.",
            "examples": [
              "https://w3id.org/dspace/2025/1/context.jsonld"
            ]
          },
          "type": {
            "type": "string",
            "description": "The message type, always 'TransferError'.",
            "examples": [
              "TransferError"
            ]
          },
          "providerPid": {
            "type": "string",
            "pattern": "^urn:uuid:[0-9a-fA-F-]{36}$"
          },
          "consumerPid": {
            "type": "string",
            "pattern": "^urn:uuid:[0-9a-fA-F-]{36}$"
          },
          "code": {
            "type": "string",
            "description": "A machine-readable error code.",
            "examples": [
              "PEER_SERVICE_UNAVAILABLE"
            ]
          },
          "reason": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of human-readable reasons describing the error."
          }
        }
      },
      "RainbowEventsSubscriptionCreationRequest": {
        "type": "object",
        "description": "Request body to create a new event subscription.",
        "properties": {
          "callbackAddress": {
            "type": "string",
            "description": "The URL where event notifications (webhooks) will be sent.",
            "examples": [
              "https://myservice.com/webhooks/rainbow"
            ]
          },
          "expirationTime": {
            "type": "string",
            "format": "date-time",
            "description": "Optional timestamp (ISO 8601) of when the subscription will expire.",
            "examples": [
              "2026-01-01T00:00:00Z"
            ]
          }
        },
        "required": [
          "callbackAddress"
        ]
      },
      "RainbowEventsSubscriptionEditionRequest": {
        "type": "object",
        "description": "Request body to edit an existing subscription.",
        "properties": {
          "callbackAddress": {
            "type": "string",
            "description": "The new URL where notifications will be sent.",
            "examples": [
              "https://myservice.com/webhooks/new-endpoint"
            ]
          },
          "expirationTime": {
            "type": "string",
            "format": "date-time",
            "description": "The new expiration date for the subscription.",
            "examples": [
              "2027-01-01T00:00:00Z"
            ]
          }
        }
      },
      "RainbowEventsSubscriptionCreationResponse": {
        "type": "object",
        "description": "Represents an event subscription, returned when creating, getting, or updating one.",
        "properties": {
          "subscriptionId": {
            "type": "string",
            "pattern": "^urn:uuid:[0-9a-fA-F-]{36}$",
            "description": "The unique identifier of the subscription."
          },
          "callbackAddress": {
            "type": "string",
            "description": "The URL where notifications are sent.",
            "examples": [
              "https://myservice.com/webhooks/rainbow"
            ]
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of the subscription's creation.",
            "examples": [
              "2025-03-07T09:56:28.105105Z"
            ]
          },
          "expirationTime": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of the subscription's expiration (if it exists).",
            "examples": [
              "2026-01-01T00:00:00Z"
            ]
          },
          "subscriptionEntity": {
            "type": "string",
            "description": "The entity being subscribed to.",
            "enum": [
              "TransferProcess",
              "Catalog",
              "ContractNegotiationProcess",
              "DataPlaneProcess"
            ],
            "examples": [
              "TransferProcess"
            ]
          },
          "active": {
            "type": "boolean",
            "description": "Indicates if the subscription is active and sending notifications."
          }
        },
        "required": [
          "subscriptionId",
          "callbackAddress",
          "timestamp",
          "subscriptionEntity",
          "active"
        ]
      },
      "RainbowEventsNotificationResponse": {
        "type": "object",
        "description": "Represents an event notification sent to a subscription.",
        "properties": {
          "notificationId": {
            "type": "string",
            "pattern": "^urn:uuid:[0-9a-fA-F-]{36}$",
            "description": "The unique identifier of the notification."
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the notification was generated.",
            "examples": [
              "2025-03-07T10:15:00.500200Z"
            ]
          },
          "category": {
            "type": "string",
            "description": "The category of the event that generated the notification.",
            "enum": [
              "TransferProcess",
              "Catalog",
              "ContractNegotiationProcess",
              "DataPlaneProcess"
            ],
            "examples": [
              "TransferProcess"
            ]
          },
          "messageType": {
            "type": "string",
            "description": "The type of message contained in the notification.",
            "enum": [
              "RPCMessage",
              "DSProtocolMessage",
              "RainbowEntitiesMessage"
            ],
            "examples": [
              "RainbowEntitiesMessage"
            ]
          },
          "messageContent": {
            "type": "object",
            "description": "The content of the notification message, usually an entity like `RainbowTransferProcess`."
          },
          "subscriptionId": {
            "type": "string",
            "pattern": "^urn:uuid:[0-9a-fA-F-]{36}$",
            "description": "The ID of the subscription that received this notification."
          }
        },
        "required": [
          "notificationId",
          "timestamp",
          "category",
          "messageType",
          "messageContent",
          "subscriptionId"
        ]
      },
      "SubscriptionErrorMessage": {
        "type": "object",
        "description": "Error structure for subscription management endpoints.",
        "properties": {
          "code": {
            "type": "string",
            "description": "HTTP status code.",
            "examples": [
              "404"
            ]
          },
          "title": {
            "type": "string",
            "description": "Short title for the error.",
            "examples": [
              "SUBSCRIPTION_NOT_FOUND"
            ]
          },
          "message": {
            "type": "string",
            "description": "Descriptive error message.",
            "examples": [
              "A subscription with the provided ID was not found."
            ]
          }
        },
        "required": [
          "code",
          "title",
          "message"
        ]
      },
      "NotificationErrorMessage": {
        "type": "object",
        "description": "Error structure for notification query endpoints.",
        "properties": {
          "code": {
            "type": "string",
            "description": "HTTP status code.",
            "examples": [
              "404"
            ]
          },
          "title": {
            "type": "string",
            "description": "Short title for the error.",
            "examples": [
              "NOTIFICATION_NOT_FOUND"
            ]
          },
          "message": {
            "type": "string",
            "description": "Descriptive error message.",
            "examples": [
              "A notification with the provided ID was not found for the given subscription."
            ]
          }
        },
        "required": [
          "code",
          "title",
          "message"
        ]
      }
    }
  }
}

