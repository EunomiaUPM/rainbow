import{f as i,N as p}from"./index-BAHtZRt5.js";const l=async o=>{let r=await(await fetch(o.api_gateway+"/transfers/rpc/setup-request",{headers:{"Content-Type":"application/json"},body:JSON.stringify(o.content),method:"POST"})).json();if(r.error)throw new Error(r.error);return{providerPid:r.providerPid}},g=()=>{const o=p(),{data:r,isSuccess:n,isError:s,error:t,mutate:a,isPending:c,mutateAsync:e}=i({mutationFn:l,onMutate:async()=>{},onError:u=>{console.log("onError"),console.log(u)},onSuccess:async({},u)=>{console.log("onSuccess"),await o.navigate({to:"/transfer-process"})},onSettled:()=>{}});return{data:r,isSuccess:n,isError:s,error:t,mutate:a,mutateAsync:e,isPending:c}},d=async o=>{let r=await(await fetch(o.api_gateway+"/transfers/rpc/setup-start",{headers:{"Content-Type":"application/json"},body:JSON.stringify(o.content),method:"POST"})).json();if(r.error)throw new Error(r.error);return{providerPid:r.providerPid}},m=()=>{const{data:o,isSuccess:r,isError:n,error:s,mutate:t,isPending:a,mutateAsync:c}=i({mutationFn:d,onMutate:async()=>{},onError:e=>{console.log("onError"),console.log(e)},onSuccess:async({},e)=>{console.log("onSuccess")},onSettled:()=>{}});return{data:o,isSuccess:r,isError:n,error:s,mutate:t,mutateAsync:c,isPending:a}},y=async o=>{let r=await(await fetch(o.api_gateway+"/transfers/rpc/setup-suspension",{headers:{"Content-Type":"application/json"},body:JSON.stringify(o.content),method:"POST"})).json();if(r.error)throw new Error(r.error);return{providerPid:r.providerPid}},w=()=>{const{data:o,isSuccess:r,isError:n,error:s,mutate:t,isPending:a,mutateAsync:c}=i({mutationFn:y,onMutate:async()=>{},onError:e=>{console.log("onError"),console.log(e)},onSuccess:async({},e)=>{console.log("onSuccess")},onSettled:()=>{}});return{data:o,isSuccess:r,isError:n,error:s,mutate:t,mutateAsync:c,isPending:a}},P=async o=>{let r=await(await fetch(o.api_gateway+"/transfers/rpc/setup-completion",{headers:{"Content-Type":"application/json"},body:JSON.stringify(o.content),method:"POST"})).json();if(r.error)throw new Error(r.error);return{providerPid:r.providerPid}},T=()=>{const{data:o,isSuccess:r,isError:n,error:s,mutate:t,isPending:a,mutateAsync:c}=i({mutationFn:P,onMutate:async()=>{},onError:e=>{console.log("onError"),console.log(e)},onSuccess:async({},e)=>{console.log("onSuccess")},onSettled:()=>{}});return{data:o,isSuccess:r,isError:n,error:s,mutate:t,mutateAsync:c,isPending:a}},S=async o=>{let r=await(await fetch(o.api_gateway+"/transfers/rpc/setup-termination",{headers:{"Content-Type":"application/json"},body:JSON.stringify(o.content),method:"POST"})).json();if(r.error)throw new Error(r.error);return{providerPid:r.providerPid}},h=()=>{const{data:o,isSuccess:r,isError:n,error:s,mutate:t,isPending:a,mutateAsync:c}=i({mutationFn:S,onMutate:async()=>{},onError:e=>{console.log("onError"),console.log(e)},onSuccess:async({},e)=>{console.log("onSuccess")},onSettled:()=>{}});return{data:o,isSuccess:r,isError:n,error:s,mutate:t,mutateAsync:c,isPending:a}};export{m as a,h as b,w as c,T as d,g as u};
