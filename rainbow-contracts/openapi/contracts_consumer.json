{
  "openapi": "3.0.1",
  "info": {
    "title": "Contract Negotiation Protocol API - Rainbow Consumer",
    "description": "This API provides endpoints for a consumer to manage the entire lifecycle of a contract negotiation process. It includes operations for handling negotiation processes, exchanging messages and offers, finalizing agreements, and managing data space participants. The API also exposes RPC endpoints for initiating key negotiation states.",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://api.rainbow-consumer.com",
      "description": "Production Server"
    },
    {
      "url": "http://127.0.0.1:1200",
      "description": "Local Testing Server"
    }
  ],
  "tags": [
    {
      "name": "Negotiation Processes",
      "description": "Manage the lifecycle of contract negotiation processes."
    },
    {
      "name": "Messages",
      "description": "Send, retrieve, and manage messages within a negotiation process."
    },
    {
      "name": "Offers",
      "description": "Create and manage contract offers."
    },
    {
      "name": "Agreements",
      "description": "Manage finalized contract agreements."
    },
    {
      "name": "RPC",
      "description": "Endpoints for remote lifecycle control of a contract negotiation (Remote Procedure Call)."
    }
  ],
  "paths": {
    "/api/v1/contract-negotiation/processes": {
      "get": {
        "tags": [
          "Negotiation Processes"
        ],
        "summary": "List all contract negotiation processes",
        "operationId": "getNegotiationProcesses",
        "description": "Retrieves a list of all contract negotiation processes handled by the consumer.",
        "responses": {
          "200": {
            "description": "A list of contract negotiation processes.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CnConsumerProcess"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RainbowCNError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Negotiation Processes"
        ],
        "summary": "Create a contract negotiation process",
        "operationId": "createNegotiationProcess",
        "description": "Initiates a new contract negotiation process.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewContractNegotiationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The contract negotiation process was created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CnConsumerProcess"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request body is malformed or invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RainbowCNError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RainbowCNError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/contract-negotiation/processes/{processId}": {
      "parameters": [
        {
          "name": "processId",
          "in": "path",
          "required": true,
          "description": "The unique identifier of the contract negotiation process.",
          "schema": {
            "type": "string",
            "format": "uri"
          }
        }
      ],
      "get": {
        "tags": [
          "Negotiation Processes"
        ],
        "summary": "Get a negotiation process by ID",
        "operationId": "getNegotiationProcessById",
        "description": "Retrieves a single contract negotiation process by its unique ID.",
        "responses": {
          "200": {
            "description": "Details of the contract negotiation process.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CnConsumerProcess"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The provided process ID has an invalid format.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RainbowCNError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found: The process with the specified ID was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RainbowCNError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RainbowCNError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Negotiation Processes"
        ],
        "summary": "Update a negotiation process",
        "operationId": "updateNegotiationProcess",
        "description": "Updates the state or details of an existing contract negotiation process.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditContractNegotiationRequest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "The negotiation process was updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CnConsumerProcess"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request body is malformed or the ID is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RainbowCNError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found: The process with the specified ID was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RainbowCNError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RainbowCNError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Negotiation Processes"
        ],
        "summary": "Delete a negotiation process",
        "operationId": "deleteNegotiationProcess",
        "description": "Deletes a contract negotiation process and all its associated messages and offers.",
        "responses": {
          "204": {
            "description": "The negotiation process was deleted successfully."
          },
          "400": {
            "description": "Bad Request: The provided process ID has an invalid format.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RainbowCNError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found: The process with the specified ID was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RainbowCNError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RainbowCNError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/contract-negotiation/processes/{processId}/messages": {
      "parameters": [
        {
          "$ref": "#/components/parameters/processId"
        }
      ],
      "get": {
        "tags": [
          "Messages"
        ],
        "summary": "Get all messages for a process",
        "operationId": "getMessagesByProcessId",
        "description": "Retrieves all messages associated with a specific contract negotiation process.",
        "responses": {
          "200": {
            "description": "A list of messages for the given process.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RainbowCNMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The provided process ID has an invalid format.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RainbowCNError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found: The process with the specified ID was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RainbowCNError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RainbowCNError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/contract-negotiation/messages/{messageId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/messageId"
        }
      ],
      "get": {
        "tags": [
          "Messages"
        ],
        "summary": "Get a message by ID",
        "operationId": "getMessageById",
        "description": "Retrieves a single negotiation message by its unique ID.",
        "responses": {
          "200": {
            "description": "Details of the negotiation message.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RainbowCNMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The provided message ID has an invalid format.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RainbowCNError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found: The message with the specified ID was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RainbowCNError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RainbowCNError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/contract-negotiation/processes/{processId}/offers": {
      "parameters": [
        {
          "$ref": "#/components/parameters/processId"
        }
      ],
      "get": {
        "tags": [
          "Offers"
        ],
        "summary": "Get all offers for a process",
        "operationId": "getOffersByProcessId",
        "description": "Retrieves all offers made within a specific contract negotiation process.",
        "responses": {
          "200": {
            "description": "A list of offers for the given process.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RainbowCNOffer"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The provided process ID has an invalid format.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RainbowCNError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found: The process with the specified ID was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RainbowCNError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RainbowCNError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/contract-negotiation/offers/{offerId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/offerId"
        }
      ],
      "get": {
        "tags": [
          "Offers"
        ],
        "summary": "Get an offer by ID",
        "operationId": "getOfferById",
        "description": "Retrieves a single offer by its unique ID.",
        "responses": {
          "200": {
            "description": "Details of the offer.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RainbowCNOffer"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The provided offer ID has an invalid format.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RainbowCNError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found: The offer with the specified ID was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RainbowCNError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RainbowCNError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/contract-negotiation/agreements": {
      "get": {
        "tags": [
          "Agreements"
        ],
        "summary": "List all agreements",
        "operationId": "getAllAgreements",
        "description": "Retrieves a list of all finalized contract agreements.",
        "responses": {
          "200": {
            "description": "A list of all agreements.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RainbowAgreement"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RainbowCNError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/contract-negotiation/agreements/{agreementId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/agreementId"
        }
      ],
      "get": {
        "tags": [
          "Agreements"
        ],
        "summary": "Get an agreement by ID",
        "operationId": "getAgreementById",
        "description": "Retrieves a single contract agreement by its unique ID.",
        "responses": {
          "200": {
            "description": "Details of the agreement.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RainbowAgreement"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The provided agreement ID has an invalid format.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RainbowCNError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found: The agreement with the specified ID was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RainbowCNError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RainbowCNError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/negotiations/rpc/setup-request": {
      "post": {
        "tags": [
          "RPC"
        ],
        "summary": "Send a contract request",
        "operationId": "rpcSetupRequest",
        "description": "Creates and sends a contract request message to a provider, initiating or continuing a negotiation process.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetupRequestRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Offer sent and acknowledged by the provider.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SetupRequestResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request body is malformed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DSRPCCNConsumerErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DSRPCCNConsumerErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable: The consumer is not reachable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DSRPCCNConsumerErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/negotiations/rpc/setup-acceptance": {
      "post": {
        "tags": [
          "RPC"
        ],
        "summary": "Send a contract acceptance",
        "operationId": "rpcSetupAcceptance",
        "description": "Sends a acceptance of the negotiation's terms.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetupAcceptanceRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Negotiation sent and acknowledged by the provider.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SetupAcceptanceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request body is malformed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DSRPCCNConsumerErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DSRPCCNConsumerErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable: The consumer is not reachable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DSRPCCNConsumerErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/negotiations/rpc/setup-verification": {
      "post": {
        "tags": [
          "RPC"
        ],
        "summary": "Finalize a negotiation",
        "operationId": "rpcSetupVerification",
        "description": "Sends a verification message to the provider, confirming the contract agreement from the consumer's side.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetupVerificationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Verification message sent and acknowledged by the consumer.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SetupVerificationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request body is malformed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DSRPCCNConsumerErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DSRPCCNConsumerErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable: The consumer is not reachable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DSRPCCNConsumerErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/negotiations/rpc/setup-termination": {
      "post": {
        "tags": [
          "RPC"
        ],
        "summary": "Terminate a negotiation",
        "operationId": "rpcSetupTermination",
        "description": "Sends a termination message to the consumer to end the negotiation process.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetupTerminationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Termination message sent and acknowledged by the consumer.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SetupTerminationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request body is malformed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DSRPCCNConsumerErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DSRPCCNConsumerErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable: The consumer is not reachable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DSRPCCNConsumerErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/contract-negotiation/subscriptions": {
      "get": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "List all subscriptions",
        "operationId": "getAllSubscriptions",
        "security": [],
        "description": "Retrieves a list of all event subscriptions (webhooks) currently configured on the provider.",
        "responses": {
          "200": {
            "description": "A list of subscription objects.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RainbowEventsSubscriptionCreationResponse"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: A general error occurred on the provider.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionErrorMessage"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Create a new subscription",
        "operationId": "createSubscription",
        "security": [],
        "description": "Registers a new subscription to receive event notifications at a specified callback URL. This allows external systems to react to changes in the transfer lifecycle.",
        "requestBody": {
          "description": "Details of the subscription to be created.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RainbowEventsSubscriptionCreationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Subscription created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RainbowEventsSubscriptionCreationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request body is malformed or the callback URL is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionErrorMessage"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: An error occurred while creating the subscription.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/contract-negotiation/subscriptions/{subscription_id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/subscription_id"
        }
      ],
      "get": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Get a subscription by ID",
        "operationId": "getSubscriptionById",
        "security": [],
        "description": "Retrieves the details of a specific subscription using its unique identifier.",
        "responses": {
          "200": {
            "description": "Subscription details successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RainbowEventsSubscriptionCreationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The provided `subscription_id` does not follow the required 'urn:uuid:<uuid>' format.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found: No subscription was found with the specified ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionErrorMessage"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: An error occurred while retrieving the subscription.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionErrorMessage"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Update a subscription by ID",
        "operationId": "updateSubscriptionById",
        "security": [],
        "description": "Modifies an existing subscription. Allows changing the callback URL or expiration date.",
        "requestBody": {
          "description": "Fields of the subscription to be updated.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RainbowEventsSubscriptionEditionRequest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Subscription updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RainbowEventsSubscriptionCreationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The request body is malformed or the `subscription_id` is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found: No subscription was found with the specified ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionErrorMessage"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: An error occurred while updating the subscription.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionErrorMessage"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Delete a subscription by ID",
        "operationId": "deleteSubscriptionById",
        "security": [],
        "description": "Permanently deletes a subscription. The provider will stop sending notifications to the associated callback URL.",
        "responses": {
          "204": {
            "description": "Subscription deleted successfully. No content is returned."
          },
          "404": {
            "description": "Not Found: No subscription was found with the specified ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionErrorMessage"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: An error occurred while deleting the subscription.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/contract-negotiation/notifications": {
      "get": {
        "tags": [
          "Notifications"
        ],
        "summary": "List all notifications",
        "operationId": "getAllNotifications",
        "security": [],
        "description": "Retrieves a history of all notifications sent by the provider to all subscriptions.",
        "responses": {
          "200": {
            "description": "A list of all notifications.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RainbowEventsNotificationResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/contract-negotiation/subscriptions/{subscription_id}/notifications": {
      "parameters": [
        {
          "$ref": "#/components/parameters/subscription_id"
        }
      ],
      "get": {
        "tags": [
          "Notifications"
        ],
        "summary": "List notifications for a subscription",
        "operationId": "getNotificationsBySubscriptionId",
        "security": [],
        "description": "Retrieves all notifications (sent and pending) associated with a specific subscription.",
        "responses": {
          "200": {
            "description": "A list of notifications for the specified subscription.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RainbowEventsNotificationResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The provided `subscription_id` is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found: The specified subscription was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationErrorMessage"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: An error occurred on the server.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/contract-negotiation/subscriptions/{subscription_id}/notifications-pending": {
      "parameters": [
        {
          "$ref": "#/components/parameters/subscription_id"
        }
      ],
      "get": {
        "tags": [
          "Notifications"
        ],
        "summary": "List pending notifications for a subscription",
        "operationId": "getPendingNotificationsBySubscriptionId",
        "security": [],
        "description": "Retrieves a list of notifications that have not yet been sent or confirmed by a specific subscription's callback. Useful for debugging and retries.",
        "responses": {
          "200": {
            "description": "A list of pending notifications.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RainbowEventsNotificationResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The provided `subscription_id` is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found: The specified subscription was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationErrorMessage"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: An error occurred on the server.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/contract-negotiation/subscriptions/{subscription_id}/ack-notifications-pending": {
      "parameters": [
        {
          "$ref": "#/components/parameters/subscription_id"
        }
      ],
      "post": {
        "tags": [
          "Notifications"
        ],
        "summary": "Returns pending notifications for a subscription and sets them as acknowledged",
        "operationId": "ackPendingNotificationsBySubscriptionId",
        "security": [],
        "description": "Retrieves a list of notifications that have not yet been sent or confirmed by a specific subscription's callback. Once retrieved, these notifications are marked as acknowledged to prevent future retrievals.",
        "responses": {
          "202": {
            "description": "A list of pending notifications.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RainbowEventsNotificationResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The provided `subscription_id` is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found: The specified subscription was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationErrorMessage"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: An error occurred on the server.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationErrorMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/contract-negotiation/subscriptions/{subscription_id}/notifications/{notification_id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/subscription_id"
        },
        {
          "$ref": "#/components/parameters/notification_id"
        }
      ],
      "get": {
        "tags": [
          "Notifications"
        ],
        "summary": "Get a specific notification by ID",
        "operationId": "getNotificationById",
        "security": [],
        "description": "Retrieves the details of a specific notification within the context of its subscription.",
        "responses": {
          "200": {
            "description": "Notification details successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RainbowEventsNotificationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The `subscription_id` or `notification_id` is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found: The subscription or notification with the specified IDs was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationErrorMessage"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: An error occurred on the server.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationErrorMessage"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "parameters": {
      "processId": {
        "name": "processId",
        "in": "path",
        "required": true,
        "description": "The unique identifier of the contract negotiation process.",
        "schema": {
          "type": "string"
        }
      },
      "messageId": {
        "name": "messageId",
        "in": "path",
        "required": true,
        "description": "The unique identifier of the message.",
        "schema": {
          "type": "string",
          "format": "uri"
        }
      },
      "offerId": {
        "name": "offerId",
        "in": "path",
        "required": true,
        "description": "The unique identifier of the offer.",
        "schema": {
          "type": "string",
          "format": "uri"
        }
      },
      "agreementId": {
        "name": "agreementId",
        "in": "path",
        "required": true,
        "description": "The unique identifier of the agreement.",
        "schema": {
          "type": "string",
          "format": "uri"
        }
      },
      "subscription_id": {
        "name": "subscription_id",
        "in": "path",
        "required": true,
        "description": "The unique identifier of the subscription.",
        "schema": {
          "type": "string",
          "pattern": "^urn:uuid:[0-9a-fA-F-]{36}$",
          "examples": [
            "urn:uuid:987a6543-e21b-54d3-a456-112233445566"
          ]
        }
      },
      "notification_id": {
        "name": "notification_id",
        "in": "path",
        "required": true,
        "description": "The unique identifier of the notification.",
        "schema": {
          "type": "string",
          "pattern": "^urn:uuid:[0-9a-fA-F-]{36}$",
          "examples": [
            "urn:uuid:543b2109-cba0-45f8-8123-abcdefabcdef"
          ]
        }
      }
    },
    "schemas": {
      "RainbowCNError": {
        "type": "object",
        "description": "Standard error response for the Contract Negotiation API.",
        "properties": {
          "code": {
            "type": "string",
            "description": "HTTP status code.",
            "examples": [
              "404"
            ]
          },
          "title": {
            "type": "string",
            "description": "A short, machine-readable error code.",
            "examples": [
              "PROCESS_NOT_FOUND"
            ]
          },
          "message": {
            "type": "string",
            "description": "A human-readable explanation of the error.",
            "examples": [
              "Contract negotiation process with the specified ID was not found."
            ]
          }
        }
      },
      "CnConsumerProcess": {
        "type": "object",
        "description": "Represents the state of a contract negotiation process.",
        "properties": {
          "providerPid": {
            "type": "string",
            "pattern": "^urn:uuid:[0-9a-fA-F-]{36}$"
          },
          "consumerPid": {
            "type": "string",
            "pattern": "^urn:uuid:[0-9a-fA-F-]{36}$"
          },
          "associated_provider": {
            "type": "string",
            "description": "Provider participant DID.",
            "examples": [
              "did:web:example.com"
            ]
          },
          "is_business": {
            "type": "boolean",
            "description": "Indicates if the negotiation is business-related."
          },
          "state": {
            "type": "string",
            "description": "The state of the process associated with the message.",
            "enum": [
              "REQUESTED",
              "OFFERED",
              "ACCEPTED",
              "AGREED",
              "VERIFIED",
              "FINALIZED",
              "TERMINATED"
            ]
          },
          "created_at": {
            "type": "string",
            "description": "Timestamp (ISO 8601) of the process creation.",
            "format": "date-time",
            "examples": [
              "2025-03-07T09:56:28.105105Z"
            ]
          },
          "updated_at": {
            "type": "string",
            "description": "Timestamp (ISO 8601) of the process update.",
            "format": "date-time",
            "examples": [
              "2025-03-07T09:56:28.105105Z"
            ]
          }
        },
        "required": [
          "provider_id",
          "is_business",
          "state",
          "created_at"
        ]
      },
      "NewContractNegotiationRequest": {
        "type": "object",
        "description": "Request to create a new contract negotiation process.",
        "properties": {
          "providerPid": {
            "type": "string",
            "pattern": "^urn:uuid:[0-9a-fA-F-]{36}$"
          }
        }
      },
      "EditContractNegotiationRequest": {
        "type": "object",
        "description": "Request to edit a contract negotiation process.",
        "properties": {}
      },
      "RainbowCNMessage": {
        "type": "object",
        "description": "Represents a message within a contract negotiation process.",
        "properties": {
          "cn_message_id": {
            "type": "string",
            "pattern": "^urn:uuid:[0-9a-fA-F-]{36}$"
          },
          "cn_process_id": {
            "type": "string",
            "pattern": "^urn:uuid:[0-9a-fA-F-]{36}$"
          },
          "_type": {
            "type": "string",
            "enum": [
              "ContractRequestMessage",
              "ContractOfferMessage",
              "ContractAgreementMessage",
              "ContractAgreementVerificationMessage",
              "ContractNegotiationEventMessage",
              "ContractNegotiationTerminationMessage"
            ]
          },
          "subtype": {
            "type": "string"
          },
          "from": {
            "type": "string",
            "enum": [
              "Consumer",
              "Provider"
            ]
          },
          "to": {
            "type": "string",
            "enum": [
              "Consumer",
              "Provider"
            ]
          },
          "created_at": {
            "type": "string",
            "description": "Timestamp (ISO 8601) of the message creation.",
            "format": "date-time",
            "examples": [
              "2025-03-07T09:56:28.105105Z"
            ]
          },
          "content": {
            "type": "object"
          }
        }
      },
      "RainbowCNOffer": {
        "type": "object",
        "description": "Represents a contract offer within a negotiation process.",
        "properties": {
          "offer_id": {
            "type": "string",
            "pattern": "^urn:uuid:[0-9a-fA-F-]{36}$"
          },
          "cn_message_id": {
            "type": "string",
            "pattern": "^urn:uuid:[0-9a-fA-F-]{36}$"
          },
          "offer_content": {
            "type": "object"
          },
          "created_at": {
            "type": "string",
            "description": "Timestamp (ISO 8601) of the message creation.",
            "format": "date-time",
            "examples": [
              "2025-03-07T09:56:28.105105Z"
            ]
          }
        }
      },
      "RainbowAgreement": {
        "type": "object",
        "description": "Represents a finalized contract agreement.",
        "properties": {
          "agreement_id": {
            "type": "string",
            "pattern": "^urn:uuid:[0-9a-fA-F-]{36}$"
          },
          "consumer_participant_id": {
            "type": "string",
            "description": "Consumer participant DID.",
            "examples": [
              "did:web:example.com"
            ]
          },
          "provider_participant_id": {
            "type": "string",
            "description": "Consumer participant DID.",
            "examples": [
              "did:web:example.com"
            ]
          },
          "cn_message_id": {
            "type": "string",
            "pattern": "^urn:uuid:[0-9a-fA-F-]{36}$"
          },
          "agreement_content": {
            "type": "object"
          },
          "active": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string",
            "description": "Timestamp (ISO 8601) of the message creation.",
            "format": "date-time",
            "examples": [
              "2025-03-07T09:56:28.105105Z"
            ]
          }
        }
      },
      "SetupRequestRequest": {
        "type": "object",
        "description": "Request body for the RPC call to send an offer.",
        "properties": {
          "providerParticipantId": {
            "type": "string",
            "description": "Provider participant DID.",
            "examples": [
              "did:web:example.com"
            ]
          },
          "consumerPid": {
            "type": "string",
            "pattern": "^urn:uuid:[0-9a-fA-F-]{36}$"
          },
          "providerPid": {
            "type": "string",
            "pattern": "^urn:uuid:[0-9a-fA-F-]{36}$"
          },
          "offer": {
            "$ref": "#/components/schemas/OdrlOffer"
          }
        },
        "required": [
          "providerParticipantId",
          "offer"
        ]
      },
      "SetupRequestResponse": {
        "type": "object",
        "properties": {
          "consumerPid": {
            "type": "string",
            "pattern": "^urn:uuid:[0-9a-fA-F-]{36}$"
          },
          "providerPid": {
            "type": "string",
            "pattern": "^urn:uuid:[0-9a-fA-F-]{36}$"
          },
          "offer": {
            "$ref": "#/components/schemas/OdrlOffer"
          },
          "message": {
            "$ref": "#/components/schemas/ContractAckMessage"
          }
        }
      },
      "SetupAcceptanceRequest": {
        "type": "object",
        "properties": {
          "providerParticipantId": {
            "type": "string",
            "description": "Provider participant DID.",
            "examples": [
              "did:web:example.com"
            ]
          },
          "consumerPid": {
            "type": "string",
            "pattern": "^urn:uuid:[0-9a-fA-F-]{36}$"
          },
          "providerPid": {
            "type": "string",
            "pattern": "^urn:uuid:[0-9a-fA-F-]{36}$"
          }
        },
        "required": [
          "providerParticipantId",
          "consumerPid",
          "providerPid"
        ]
      },
      "SetupAcceptanceResponse": {
        "type": "object",
        "properties": {
          "consumerPid": {
            "type": "string",
            "pattern": "^urn:uuid:[0-9a-fA-F-]{36}$"
          },
          "providerPid": {
            "type": "string",
            "pattern": "^urn:uuid:[0-9a-fA-F-]{36}$"
          },
          "message": {
            "$ref": "#/components/schemas/ContractAckMessage"
          }
        }
      },
      "SetupVerificationRequest": {
        "type": "object",
        "properties": {
          "consumerParticipantId": {
            "type": "string",
            "description": "Consumer participant DID.",
            "examples": [
              "did:web:example.com"
            ]
          },
          "consumerPid": {
            "type": "string",
            "pattern": "^urn:uuid:[0-9a-fA-F-]{36}$"
          },
          "providerPid": {
            "type": "string",
            "pattern": "^urn:uuid:[0-9a-fA-F-]{36}$"
          }
        },
        "required": [
          "consumerParticipantId",
          "consumerPid",
          "providerPid"
        ]
      },
      "SetupVerificationResponse": {
        "type": "object",
        "properties": {
          "consumerPid": {
            "type": "string",
            "pattern": "^urn:uuid:[0-9a-fA-F-]{36}$"
          },
          "providerPid": {
            "type": "string",
            "pattern": "^urn:uuid:[0-9a-fA-F-]{36}$"
          },
          "message": {
            "$ref": "#/components/schemas/ContractAckMessage"
          }
        }
      },
      "SetupTerminationRequest": {
        "type": "object",
        "properties": {
          "providerParticipantId": {
            "type": "string",
            "description": "Consumer participant DID.",
            "examples": [
              "did:web:example.com"
            ]
          },
          "consumerPid": {
            "type": "string",
            "pattern": "^urn:uuid:[0-9a-fA-F-]{36}$"
          },
          "providerPid": {
            "type": "string",
            "pattern": "^urn:uuid:[0-9a-fA-F-]{36}$"
          }
        },
        "required": [
          "providerParticipantId",
          "consumerPid",
          "providerPid"
        ]
      },
      "SetupTerminationResponse": {
        "type": "object",
        "properties": {
          "consumerPid": {
            "type": "string",
            "pattern": "^urn:uuid:[0-9a-fA-F-]{36}$"
          },
          "providerPid": {
            "type": "string",
            "pattern": "^urn:uuid:[0-9a-fA-F-]{36}$"
          },
          "message": {
            "$ref": "#/components/schemas/ContractAckMessage"
          }
        }
      },
      "DSRPCCNConsumerErrorResponse": {
        "type": "object",
        "properties": {
          "consumerPid": {
            "type": "string",
            "pattern": "^urn:uuid:[0-9a-fA-F-]{36}$"
          },
          "providerPid": {
            "type": "string",
            "pattern": "^urn:uuid:[0-9a-fA-F-]{36}$"
          },
          "code": {
            "type": "string",
            "description": "A short, machine-readable error code.",
            "examples": [
              "ODRL_VALIDATION_ERROR"
            ]
          },
          "reason": {
            "type": "array",
            "description": "A human-readable explanation of the error.",
            "items": {
              "type": "string"
            },
            "examples": [
              [
                "The provided ODRL policy is invalid."
              ]
            ]
          }
        }
      },
      "OdrlOffer": {
        "type": "object",
        "description": "An ODRL offer object as per the ODRL specification.",
        "default": {
          "@context": "https://www.w3.org/ns/odrl.jsonld",
          "type": "Offer",
          "target": "urn:uuid:123e4567-e89b-12d3-a456-426614174000",
          "assigner": "did:web:provider.example.com",
          "assignee": "did:web:consumer.example.com",
          "permission": [
            {
              "type": "use",
              "constraint": [
                {
                  "leftOperand": "purpose",
                  "operator": "eq",
                  "rightOperand": "research"
                }
              ]
            }
          ],
          "prohibition": [
            {
              "type": "sell"
            }
          ],
          "obligation": [
            {
              "type": "attribute",
              "action": "notify",
              "constraint": [
                {
                  "leftOperand": "event",
                  "operator": "eq",
                  "rightOperand": "dataBreach"
                }
              ]
            }
          ]
        }
      },
      "OdrlAgreement": {
        "type": "object",
        "description": "An ODRL agreement object as per the ODRL specification.",
        "default": {
          "@context": "https://www.w3.org/ns/odrl.jsonld",
          "type": "Agreement",
          "target": "urn:uuid:123e4567-e89b-12d3-a456-426614174000",
          "assigner": "did:web:provider.example.com",
          "assignee": "did:web:consumer.example.com",
          "permission": [
            {
              "type": "use",
              "constraint": [
                {
                  "leftOperand": "purpose",
                  "operator": "eq",
                  "rightOperand": "research"
                }
              ]
            }
          ],
          "prohibition": [
            {
              "type": "sell"
            }
          ],
          "obligation": [
            {
              "type": "attribute",
              "action": "notify",
              "constraint": [
                {
                  "leftOperand": "event",
                  "operator": "eq",
                  "rightOperand": "dataBreach"
                }
              ]
            }
          ]
        }
      },
      "ContractAckMessage": {
        "type": "object",
        "description": "A generic message that is part of the transfer protocol.",
        "properties": {
          "context": {
            "type": "string",
            "description": "JSON-LD context of the message.",
            "default": "https://w3id.org/dspace/2025/1/context.jsonld",
            "examples": [
              "https://w3id.org/dspace/2025/1/context.jsonld"
            ]
          },
          "type": {
            "type": "string",
            "description": "The type of transfer message.",
            "enum": [
              "ContractRequestMessage",
              "ContractOfferMessage",
              "ContractAgreementMessage",
              "ContractAgreementVerificationMessage",
              "ContractNegotiationEventMessage",
              "ContractNegotiationTerminationMessage"
            ],
            "examples": [
              "ContractRequestMessage"
            ]
          },
          "providerPid": {
            "type": "string",
            "pattern": "^urn:uuid:[0-9a-fA-F-]{36}$"
          },
          "consumerPid": {
            "type": "string",
            "pattern": "^urn:uuid:[0-9a-fA-F-]{36}$"
          },
          "state": {
            "type": "string",
            "description": "The state of the process associated with the message.",
            "enum": [
              "REQUESTED",
              "OFFERED",
              "ACCEPTED",
              "AGREED",
              "VERIFIED",
              "FINALIZED",
              "TERMINATED"
            ],
            "examples": [
              "REQUESTED"
            ]
          }
        }
      },
      "RainbowEventsSubscriptionCreationRequest": {
        "type": "object",
        "description": "Request body to create a new event subscription.",
        "properties": {
          "callbackAddress": {
            "type": "string",
            "description": "The URL where event notifications (webhooks) will be sent.",
            "examples": [
              "https://myservice.com/webhooks/rainbow"
            ]
          },
          "expirationTime": {
            "type": "string",
            "format": "date-time",
            "description": "Optional timestamp (ISO 8601) of when the subscription will expire.",
            "examples": [
              "2026-01-01T00:00:00Z"
            ]
          }
        },
        "required": [
          "callbackAddress"
        ]
      },
      "RainbowEventsSubscriptionEditionRequest": {
        "type": "object",
        "description": "Request body to edit an existing subscription.",
        "properties": {
          "callbackAddress": {
            "type": "string",
            "description": "The new URL where notifications will be sent.",
            "examples": [
              "https://myservice.com/webhooks/new-endpoint"
            ]
          },
          "expirationTime": {
            "type": "string",
            "format": "date-time",
            "description": "The new expiration date for the subscription.",
            "examples": [
              "2027-01-01T00:00:00Z"
            ]
          }
        }
      },
      "RainbowEventsSubscriptionCreationResponse": {
        "type": "object",
        "description": "Represents an event subscription, returned when creating, getting, or updating one.",
        "properties": {
          "subscriptionId": {
            "type": "string",
            "pattern": "^urn:uuid:[0-9a-fA-F-]{36}$",
            "description": "The unique identifier of the subscription."
          },
          "callbackAddress": {
            "type": "string",
            "description": "The URL where notifications are sent.",
            "examples": [
              "https://myservice.com/webhooks/rainbow"
            ]
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of the subscription's creation.",
            "examples": [
              "2025-03-07T09:56:28.105105Z"
            ]
          },
          "expirationTime": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of the subscription's expiration (if it exists).",
            "examples": [
              "2026-01-01T00:00:00Z"
            ]
          },
          "subscriptionEntity": {
            "type": "string",
            "description": "The entity being subscribed to.",
            "enum": [
              "TransferProcess",
              "Catalog",
              "ContractNegotiationProcess",
              "DataPlaneProcess"
            ],
            "examples": [
              "TransferProcess"
            ]
          },
          "active": {
            "type": "boolean",
            "description": "Indicates if the subscription is active and sending notifications."
          }
        },
        "required": [
          "subscriptionId",
          "callbackAddress",
          "timestamp",
          "subscriptionEntity",
          "active"
        ]
      },
      "RainbowEventsNotificationResponse": {
        "type": "object",
        "description": "Represents an event notification sent to a subscription.",
        "properties": {
          "notificationId": {
            "type": "string",
            "pattern": "^urn:uuid:[0-9a-fA-F-]{36}$",
            "description": "The unique identifier of the notification."
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the notification was generated.",
            "examples": [
              "2025-03-07T10:15:00.500200Z"
            ]
          },
          "category": {
            "type": "string",
            "description": "The category of the event that generated the notification.",
            "enum": [
              "TransferProcess",
              "Catalog",
              "ContractNegotiationProcess",
              "DataPlaneProcess"
            ],
            "examples": [
              "TransferProcess"
            ]
          },
          "messageType": {
            "type": "string",
            "description": "The type of message contained in the notification.",
            "enum": [
              "RPCMessage",
              "DSProtocolMessage",
              "RainbowEntitiesMessage"
            ],
            "examples": [
              "RainbowEntitiesMessage"
            ]
          },
          "messageContent": {
            "type": "object",
            "description": "The content of the notification message, usually an entity like `RainbowTransferProcess`."
          },
          "subscriptionId": {
            "type": "string",
            "pattern": "^urn:uuid:[0-9a-fA-F-]{36}$",
            "description": "The ID of the subscription that received this notification."
          }
        },
        "required": [
          "notificationId",
          "timestamp",
          "category",
          "messageType",
          "messageContent",
          "subscriptionId"
        ]
      },
      "SubscriptionErrorMessage": {
        "type": "object",
        "description": "Error structure for subscription management endpoints.",
        "properties": {
          "code": {
            "type": "string",
            "description": "HTTP status code.",
            "examples": [
              "404"
            ]
          },
          "title": {
            "type": "string",
            "description": "Short title for the error.",
            "examples": [
              "SUBSCRIPTION_NOT_FOUND"
            ]
          },
          "message": {
            "type": "string",
            "description": "Descriptive error message.",
            "examples": [
              "A subscription with the provided ID was not found."
            ]
          }
        },
        "required": [
          "code",
          "title",
          "message"
        ]
      },
      "NotificationErrorMessage": {
        "type": "object",
        "description": "Error structure for notification query endpoints.",
        "properties": {
          "code": {
            "type": "string",
            "description": "HTTP status code.",
            "examples": [
              "404"
            ]
          },
          "title": {
            "type": "string",
            "description": "Short title for the error.",
            "examples": [
              "NOTIFICATION_NOT_FOUND"
            ]
          },
          "message": {
            "type": "string",
            "description": "Descriptive error message.",
            "examples": [
              "A notification with the provided ID was not found for the given subscription."
            ]
          }
        },
        "required": [
          "code",
          "title",
          "message"
        ]
      }
    }
  }
}